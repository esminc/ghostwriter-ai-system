📋 docs: Phase 7+ AI中心アーキテクチャ移行計画策定

## 🎯 策定内容

### AI中心設計への回帰計画
- **移行目標**: 元の設計思想「複雑なことは全てAIに任せる」への回帰
- **期間**: 7週間の段階的移行計画
- **効果**: コード量93%削減 (1200+ lines → 80 lines)

### 3段階移行戦略
1. **Phase 7a (2週間)**: キーワード抽出AI化
   - 200+ lines → 10 lines (-95%削減)
   - 複雑な分類ロジックをAIに移譲

2. **Phase 7b (2週間)**: プロンプト構築簡素化
   - 300+ lines → 20 lines (-93%削減)  
   - AI主導の自律的データ取得実現

3. **Phase 7c (3週間)**: 完全AI中心アーキテクチャ
   - 総コード削減: 1200+ lines → 80 lines
   - MCP機能自律発見・活用システム

## 🚀 技術的革新ポイント

### 現在のアーキテクチャ課題
- 過度な前処理: JavaScript側の複雑実装
- 詳細制御: AIの自律性制限
- 機能細分化: 保守性低下

### 目標アーキテクチャ
```
Slack Bot (超薄型)
  ↓ [シンプル指示のみ]
AI Orchestrator (AI主導)
  ↓ [完全自律制御]
MCP Servers (純粋ツール)
```

### 実装例 (Phase 7c完了時)
```javascript
// 超シンプルなSlack Bot (30 lines)
app.command('/ghostwrite', async ({ command, ack, respond }) => {
  await ack();
  const result = await aiOrchestrator.generateDiary(
    command.user_name,
    command.text || "通常の日記を生成してください"
  );
  await respond(result);
});
```

## 📊 期待効果

### 開発効率の飛躍的向上
- **コード量**: 93%削減
- **新機能開発**: 90%時間短縮
- **保守作業**: 大幅軽減

### システム品質向上
- **柔軟性**: 自然言語による拡張
- **自律性**: 人間介入最小化
- **堅牢性**: AI主導エラー回復

### 設計思想の完全回帰
- **シンプルさ**: 複雑ロジックAI移譲
- **直感性**: 自然言語直接指示
- **拡張性**: プロンプト調整のみ

## 🎯 実装戦略

### リスク最小化アプローチ
- 段階的移行による既存機能維持
- A/Bテストでの品質比較
- 即座ロールバック体制

### AI能力最大活用
- GPT-4o-mini最新機能
- function calling MCP統合
- Chain of Thought複雑推論

## 📋 次回アクション

### Phase 7a準備 (即座実行可能)
1. **詳細設計**: キーワード抽出AI化企画
2. **POC実装**: 小規模実現性検証
3. **評価基準**: 成功指標明確化

### 開発環境準備
1. **ベンチマーク**: 現在システム性能測定
2. **AI能力テスト**: GPT-4o-mini複雑推論検証
3. **A/Bテスト環境**: 比較検証体制構築

## 🎊 結論

次期開発の最重要マイルストーンとして、GhostWriterの革新的発展を目指す：

- **技術革新**: 93%コード削減による保守性飛躍
- **プロセス革新**: 自然言語開発による効率化
- **思想回帰**: 元の理想的設計完全実現

Phase 6.6+の高品質基盤の上に、AI中心の自律的システムを構築し、
次世代AI代筆システムとしての地位を確立する包括的移行計画が完成。

Co-authored-by: Claude Sonnet 4 <claude@anthropic.com>